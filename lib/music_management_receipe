# MusicManagement Class Design 

## 1. Describe the Problem

As a user
So that I can keep track of my music listening
I want to add tracks I've listened to and see a list of them.

## 2. Design the Class Interface

_Include the initializer and public methods with all parameters and return values._

```ruby
# EXAMPLE
class MusicManagement
  def initialize 
    # music list
  end
  def add_music(music) # music is a string
    # Add music and return a list of them
  end
  def print_musics
    # return a list of musics
  end

end
```
## 3. Create Examples as Tests
_Make a list of examples of how the class will behave in different situations._
```ruby
# EXAMPLE
# 1
music = MusicManagement.new
music.add_music("Sweet Child O' Mine")
music.print_musics # => ["Sweet Child O' Mine"]
# 2
music = MusicManagement.new
music.add_music() # fails with "No music has been set."

# 3
music = MusicManagement.new
music.add_music("Sweet Child O' Mine")
music.add_music("Livin' on a Prayer")
music.add_music("When Doves Cry ")
task.list_tasks # => ["Sweet Child O' Mine","Livin' on a Prayer", "When Doves Cry "]

```

_Encode each example as a test. You can add to the above list as you go._

## 4. Implement the Behaviour

_After each test you write, follow the test-driving process of red, green, refactor to implement the behaviour._